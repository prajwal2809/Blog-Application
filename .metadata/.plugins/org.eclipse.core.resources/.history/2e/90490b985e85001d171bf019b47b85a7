package com.prajwal.dao;


import java.util.List;
import com.prajwal.util.SortUtil;

import javax.transaction.Transactional;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.prajwal.entity.Post;

@Repository
public class PostDAOimpl implements PostDAO{

	@Autowired
	private SessionFactory sessionFactory;
	@Override
	@Transactional
	public List<Post> getPosts() {
		
		Session currentSession=sessionFactory.getCurrentSession();
		
		Query<Post> theQuery=currentSession.createQuery("from Post",Post.class);
		
		List<Post> Posts=theQuery.getResultList();
		 
		return Posts;
	
	}
	@Override
	@Transactional
	public void savePost(Post thePost) {
		Session currentSession=sessionFactory.getCurrentSession();
	
		currentSession.save(thePost);
	}
	@Override
	@Transactional
	public Post showPost(int theId) {
		Session currentSession=sessionFactory.getCurrentSession();
		Post post=currentSession.get(Post.class, theId);
		return post;
		
	}
	@Override
	@Transactional
	public void updatePost(int theID) {

	Session currentSession=sessionFactory.getCurrentSession();
	currentSession.saveOrUpdate(theID);

	}
	@Override
	@Transactional
	public void deletePost(int theID) {
		Session currentSession=sessionFactory.getCurrentSession();
		currentSession.delete(currentSession.get(Post.class, theID));
		
	}
	@Override
	@Transactional
	public void saveTags(List<String> tagNames,int id) {
		Session currentSession=sessionFactory.getCurrentSession();
		Post post=currentSession.get(Post.class,id);
		post.addTags(tagNames);
	
		
	}
	@Override
	@Transactional
	public List<Post> searchPosts(String searchName) {
		Session currentSession = sessionFactory.getCurrentSession();
		Query<Post> theQuery = null;
        if (searchName != null && searchName.trim().length() > 0) {
        	theQuery = currentSession.createQuery("from Post where  lower(title) like :theName", Post.class);
            theQuery.setParameter("theName", "%" + searchName.toLowerCase() + "%");
        }
        else {
        	theQuery =currentSession.createQuery("from Post", Post.class);  
        }
        List<Post> thePost = theQuery.getResultList();      
        return thePost;
	}
	@Override
	public List<Post> getListOfPosts(int theSortField) {
//		Session currentSession = sessionFactory.getCurrentSession();
//		String theFieldName = null;
//		
//		switch (theSortField) {
//		
////		case SortUtil.TITLE: 
////			theFieldName = "title";
////			break;
////			
////		case SortUtil.AUTHOR:
////			theFieldName = "author";
////			break;
//			
////		case SortUtil.PUBLISHED_AT:
//			theFieldName = "publishedAt";
//		
//		default:
//			theFieldName = "title";
		}
		
		String queryString = "from Post order by " + theFieldName;
		Query<Post> theQuery = currentSession.createQuery(queryString, Post.class);
		List<Post> thePost = theQuery.getResultList();		
		return thePost;
	}
}


